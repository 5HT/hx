.\" This groff file is part of hx, a terminal hex editor.
.\"
.\" Copyright (c) 2016 Kevin Pors. See LICENSE for details.
.\"

.Dd November 04, 2016
.Dt HX 1 1
.Os hx 1.0.0

.Sh NAME
.Nm hx
.Nd Tiny hex editor for virtual terminals.

.Sh SYNOPSIS
.Nm hx
.Op Fl g Ar num
.Op Fl o Ar num
.Op Fl v
.Op Fl h
FILE

.\" ===================================================================
.\" Section for description.
.\" ===================================================================
.Sh DESCRIPTION
The hx utility is a hex editor made for today's virtual terminals. It
uses vim-inspired key bindings to navigate and edit the binary contents
of a file.

The options included with the program are as follows:
.Bl -tag -width Ds
.It Fl g Ar grouping
specifies the grouping of bytes.
.It Fl o Ar octet_length
amount of octets to display per line.
.It Fl h
displays help and exits.
.It Fl v
displays verion info and exits.
.El

.\" ===================================================================
.\" Section for the examples.
.\" ===================================================================
.Sh EXAMPLES
Open the hx binary in hex view, with default grouping of 4 bytes, and 16 octets per line.
.Pp
.Dl hx /usr/bin/hx
.Pp
The output will look like:
.Bd -literal -offset indent
000000000: 7f454c46 01010100 00000000 00000000  .ELF............
000000010: 02000300 01000000 4c8d0408 34000000  ........L...4...
000000020: b0dc0000 00000000 34002000 09002800  ........4. ...(.
.Ed

.\" ===================================================================
.\" Section key bindings.
.\" ===================================================================
.Sh KEY BINDINGS
To navigate in the editor, the following key bindings are made available:
.Pp
.Bl -item -compact -offset 2n
.It
CTRL+Q:         : quit immediately without saving.
.It
CTRL+S          : save file in-place.
.It
h / left        : move cursor one byte left in the buffer.
.It
l / right       : move cursor one byte right in the buffer.
.It
j / down        : move cursor one position up (= num_octets_per_line).
.It
k / up          : move cursor one position down (= num_octets_per_line).
.It
]               : increment the byte at the cursor position with 1.
.It
[               : decrement the byte at the cursor position with 1.
.It
x               : delete byte at current cursor position.
.It
r               : enable REPLACE mode.
.It
i               : enable INSERT mode (not functional yet).
.It
ESC             : enable COMMAND mode.
.El

.\" ===================================================================
.\" Bugs section.
.\" ===================================================================
.Sh BUGS
May very well be there. Pull requests and/or patches are welcome in any way.

.Nm
has not been tested well with huge files, so performance problems
may apply. Currently, a whole file is read into memory, meaning you are tied
to the amount of memory you currently have available. I developed the program
to alter binary executables, so really large files haven't been a problem for
me, yet.

.Nm
also does not use a library such as (n)curses to manipulate the terminal
screen, and relies solely on ANSI escape sequences. Therefore portability
may be an issue, but should work well on most modern terminal emulators.

.Sh SEE ALSO
.Xr xxd 1

.Sh AUTHORS

Original implementation by Kevin Pors <krpors@gmail.com>, with indirect help
of Salvatore Sanfilippo and his kilo editor <https://github.com/antirez/kilo>.

